############################################################
# DEFAULTS
############################################################

[DEFAULT]

# This is the base project directory to execute from.
base_dir = /home/pi/pithy

# These are where the logfles will be.
log_dir = /tmp

# Default DEBUG level if not specified
debug = False

# Lockfile for the debug temp file (TEMP_HUM_FILE)

THF_LOCKFILE = /tmp/THF_LOCKFILE

############################################################
# TEMP SENSOR - used by getTemp, THERMOD and WebSvrd
############################################################

[temp sensor]

# This pin is used by the i2C temperature sensor. 27 is what I'm using.
GPIO_PIN = 27

# This is the file that we cache the temp&humid information in.  Format
# is "TEMP\nHUMID[\nWriteTics]".  Both of the first values are floats with
#  2 digits after the decimal place.  The last optional value is an int
#  with the timestamp (tics) of the last successful read.
ENVCACHE = "/tmp/p_env_cache"


##################
# For Debugging ...
# This is the file that the getIndoorTemp.py program  will read
# the temp and humidity (one value per line) from.  It only does
# so if this value is set and the file exists, otherwise it uses the
# DHT211 sensor from
# the GPIOs below using the external getIndoorTemp.py.
# This line must be present and uncommented NO MATTER WHAT, but if you
# want to disable the debug functionality, just leave a blank value
# after the equals sign, or delete the file.
#
# ./setTemp is a local util that will write to this file (or delete it).

# TEMP_HUM_FILE = %(base_dir)s/tfile
TEMP_HUM_FILE = %(base_dir)s/tfile

# Number of seconds to wait between temperature readings.
GPIO_READ_INTERVAL = 5

# With this many *consequetive* failures to read the GPIO temp sensor,
# It will abort and send an email (defined below).
MAX_FAILS_SECS = 120

# Maximum 'local' retries before it tries to use the cache file.
MAX_RETRIES = 3

#
# Location of the logfile
LOGFILE = %(log_dir)s/p_getTemp.log

DEBUG = True


############################################################
# THERMOD
############################################################

# These files are localized to /tmp so that I can later make that into
# a RAM filesystem to avoid wear and teat on the SD CARD.

[thermod]
STATUSFILE = %(log_dir)s/p_thermod.status
PIDFILE = %(base_dir)s/p_pidfile_thermod
LOGFILE = %(log_dir)s/tmp/p_thermod.log
TEMPHUMID_DB = %(base_dir)s/temperatureLogs.db
DEBUG = True


############################################################
# WEBSRVD
############################################################
[websrvd]
# Number of seconds to leave the FLASH message on
# the browser.  Only useful in 5 sec intervals (as defined
# by the Javascript code in the html file).

FLASH_DUR = 5

DEBUG = True

############################################################
# Main Miscellaneous
############################################################
[main]


#These two are difficult to explain.
#Let's say we want it to be 75, and it's in cooling mode.
#if the active_hysteresis is 0.5, it will cool to 74.5 before shutting off.
#on the other side, if the inactive_hysteresis is 1, the system will allow
#the indoor temp to reach 76 before turning cooling back on.

#adjust them to the particulars of your system / personal preference

active_hysteresis = 0.5
inactive_hysteresis = 1

# There is No AC_PIN in the PRS configuration

HEATER_PIN = 17
AC_PIN = 00
FAN_PIN = 22

# Number of seconds that the fan should run right after stopping the
# Heater
FAN_IDLE_TIME = 2
COMPRESSOR_SAVE_TIME = 5

#mail notifications to alert to potential hardware problems
[mail]
enabled = True

#how many degrees the indoor temperature can stray from the target
#before sending alert email
error_threshold = 5.0

#additional mail config (servers and such) is done in mailconf.txt


############################################################
# SQLITE Logging
############################################################
[sqlite]
enabled = True

############################################################
# Weather
############################################################
[weather]

#if you want external weather data on the web UI
enabled = False
#your zip/postal code. No idea if this works outside the US.
ZIP = 94956

############################################################
# EMAIL NOTIFICATIONS CONFIG
############################################################

#
# Settings relating to sending email notifications.  Used by both
# THERMOD and getTemp.py.
#
[mailconf]
SMTP_SERVER = sf.petonic.com
SMTP_PORT = 2526
username = logger
password = asdfZXC12
sender = "Pithy Daemon Email" <logger@petonic.com>
recipient = petonic@yahoo.com
subject = Update from Pithy
email_body_prefix = Heating is a bit out of whack, check Pithy!
