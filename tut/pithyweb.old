#!/usr/bin/python
from __future__ import print_function

import os
import subprocess
import re
import ConfigParser
import RPi.GPIO as GPIO
from pdb import set_trace as bp

from getIndoorTemp import getIndoorTemp
from flask import Flask, request, session, g, redirect, url_for,\
    abort, render_template, flash, jsonify
import sys

debug=1


app = Flask(__name__)
# hard to be secret in open source... >.>
app.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'

abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

config = ConfigParser.ConfigParser()
config.read("config.txt")
ZIP = config.get('weather', 'ZIP')
HEATER_PIN = int(config.get('main', 'HEATER_PIN'))
FAN_PIN = int(config.get('main', 'FAN_PIN'))
DEBUG = int(config.get('main', 'DEBUG'))
weatherEnabled = config.getboolean('weather', 'enabled')
TH_FILE = config.get('main', "TEMP_HUM_FILE")

l = "debuglogfile"

hline = "************************\n************************\n************************\n"

debug = False
DEBUG = False

def exportGpioPins(pinParm):
  exportPrefix = "/sys/class/gpio/export"
  statusPrefix = "/sys/class/gpio/gpio{:d}"

  if not(isinstance(pinParm, list)):
    pinParm = [pinParm]

  try:
    for i in pinParm:
      with open(exportPrefix , mode="w") as exportFD:
        if not os.path.islink(statusPrefix.format(i)):
            try:
              print("{:d}".format(i), file=exportFD)
            except:
              print("{}: error exporting GPIO pin #{}".format("pithyweb",i),
                    file=sys.stderr)
              sys.exit(2)
  except:
    print("{}: Remember to export the pin first, using\n"+
          "\tfor i in {}:\n\t\techo i > /sys/class/gpio/export".
          format(__name__,pinParm), file=sys.stderr)
    sys.exit(3)



def dprint(str):
  if (debug):
    l.info(str)


dprint("%s: TH_Files = <%s>" % (hline, TH_FILE))

Relay_channel = [FAN_PIN, HEATER_PIN]
GPIO.setmode(GPIO.BCM)
GPIO.setup(Relay_channel, GPIO.OUT, initial=GPIO.HIGH)
exportGpioPins(Relay_channel)



# GPIO.output(Relay_channel[0], GPIO.LOW)

def getPinStatus(pinParm):
  try:
    with open("/sys/class/gpio/gpio{}/value".format(pinParm)) as pin:
      status = 1 - int(pin.read(1))
  except:
    print("{}: Remember to export the pin first, using\n"+
          "\techo {} > /sys/class/gpio/export".format(__file__, pinParm), file=sys.stderr)
    status = -1
  #  print("Pin Status of <{}> is <{}>, type is {}".format(pinParm, status,
  #                                                       type(status)))
  return status



# start the daemon in the background, ignore errors
subprocess.Popen("/usr/bin/python pithyd.py start", shell=True)

if weatherEnabled == True:
  import pywapi

  def getWeather():
    result = pywapi.get_weather_from_yahoo(str(ZIP), units='imperial')
    string = result['html_description']
    string = string.replace("\n", "")

    # You will likely have to change these strings, unless you don't mind the
    # additional garbage at the end.
    string = string.replace(
        "(provided by <a href=\"http://www.weather.com\" >The Weather Channel</a>)<br/>", "")
    string = string.replace(
        "<br /><a href=\"http://us.rd.yahoo.com/dailynews/rss/weather/Nashville__TN/*http://weather.yahoo.com/forecast/USTN0357_f.html\">Full Forecast at Yahoo! Weather</a><BR/><BR/>", "")
    return string


def getWhatsOn():
  # We have to flip the status because these are active HIGH
  heatStatus = 1 - int(getPinStatus(HEATER_PIN))
  fanStatus = 1 - int(getPinStatus(FAN_PIN))


  # print('======== getWhatsOnL Heat Status ({}) is {}, and fanStatus({}) is {}'.format(
  #     HEATER_PIN, heatStatus, FAN_PIN, fanStatus))

  headerStr = "<table>"

  heatString = "<tr><td>Heat:</td><td>{}</td></tr>".format(
      "<font color='red'>ON" if heatStatus == 1 else "<font color='blue'>Off")
  fanString = "<tr><td>Fan:</td><td>{}</td></tr>".format(
      "<font color='blue'>ON" if fanStatus == 1 else "<font color='black'>Off")
  return '<table>' + heatString + fanString + '</table>'


def getDaemonStatus():
  # print "rwi: getDaemonStatus() called"
  try:
    with open('daemon.pid'):
      pid = int(subprocess.Popen("cat daemon.pid", shell=True,
                                 stdout=subprocess.PIPE).stdout.read().strip())
      try:
        os.kill(pid, 0)
        return "<p id=\"daemonRunning\"> Daemon is running. </p>"
      except OSError:
        return "<p id=\"daemonNotRunning\"> DAEMON IS NOT RUNNING. </p>"
  except IOError:
    return "<p id=\"daemonNotRunning\"> DAEMON IS NOT RUNNING. </p>"


@app.route('/')
def my_form():
  f = open("status", "r")
  targetTemp = f.readline().strip()
  mode = f.readline()
  print("--- Mode is {}".format(mode))
  f.close()
  print(hline + "target temp is {}, mode is <{}>".format(targetTemp, mode))

  weatherString = ""
  if weatherEnabled == True:
    try:
      # DBG: datestring = subprocess.Popen("date", shell=True, stdout=subprocess.PIPE).stdout.read().strip()
      # DBG print "rwi: my_form... Getting weather at {}".format(datestring)
      weatherString = getWeather()
    except:
      weatherString = "Couldn't get remote weather info! <br><br>"

  whatsOn = getWhatsOn()


  # find out what mode the system is in, and set the switch accordingly
  # the switch is in the "cool" position when the checkbox is checked
  daemonStatus = getDaemonStatus()

  if mode == "heat":
    checked = "checked=\"checked\""
  elif mode == "off":
    checked = ""
  else:
    checked = "Something broke"

  print("Going to render the form, checked=<{}>".format(checked))
  return render_template("form.html", targetTemp=targetTemp,
                         weatherString=weatherString,
                         checked=checked,
                         daemonStatus=daemonStatus,
                         whatsOn=whatsOn)


@app.route("/", methods=['POST'])
def my_form_post():

  text = request.form['target']
  mode = "off"
  print("****************** Top of form_post".format())

  # default mode to off
  # heat if the checkbox is returned, it is checked
  # and cool mode has been selected

  if 'onoffswitch' in request.form:
    mode = "heat"
  else:
    mode = "off"
  print("-- Mode is now {}".format(mode))

  flash("onoffswitch is %s" % mode)

  newTargetTemp = text.upper()
  match = re.search(r'^\d{2}$', newTargetTemp)
  if match:
    f = open("status", "w")
    f.write(newTargetTemp + "\n" + mode)
    f.close()
    flash("New temperature of " + newTargetTemp + " set!")
    return redirect(url_for('my_form'))
  else:
    flash("That is not a two digit number! Try again!")
    return redirect(url_for('my_form'))


# the flask views for the incredible and probably
# not at all standards compliant live data

@app.route('/_liveTemp', methods=['GET'])
def updateTemp():
  rv = getIndoorTemp()
  temp = rv[0]
  if (temp == 0.0):
    rv = "error"
  else:
    rv = (str(round(temp, 1)))
  return (rv)


@app.route('/_liveWhatsOn', methods=['GET'])
def updateWhatsOn():
  # print 'app.debug is {}'.format(app.debug)
  return getWhatsOn()


@app.route('/_liveDaemonStatus', methods=['GET'])
def updateDaemonStatus():

  return getDaemonStatus()


if __name__ == "__main__":
  dprint('************* RUNNING AS MAIN ****************')
  import logging
  log = logging.getLogger('werkzeug')
  log.setLevel(logging.ERROR)

  l = logging.getLogger('LOGwebserver')
  l.setLevel(logging.DEBUG)

  app.config['DEBUG'] = True
  DEBUG = True
  app.run("0.0.0.0", port=7000, debug=True)
